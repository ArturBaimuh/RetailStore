@page "/ShopPage"
@using ReatailStore.Domain.Entities;
@using ReatailStore.Domain.SupportData;
@using System.Net.Http.Headers;
@inject HttpClient client
@inject NavigationManager navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<h2>Магазины</h2>

<form @onsubmit="CreateNewShop">
    <label for="newProcent">Address:</label>
    <input type="text" id="newProcent" @bind="@newShop.Address" required />
    <button class="btn btn-primary" type="submit">Create</button>
    @if (Stocks.Count > 0)
    {
        <div>
            <label for="newProductProviderId">Выберите склад:</label>
            <select id="newProductProviderId" @bind="newShop.StockId">
                <option value="0">Выбрать...</option>
                @foreach (var stock in Stocks)
                {
                    @if (stock != null)
                    {
                        <option value="@stock.Id">@stock.Address</option>
                    }
                }
            </select>
        </div>        
    } 
</form>

@if (Shops != null && Shops.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Адрес</th>
                <th>Адрес склада</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var shop in Shops)
            {
                <tr>
                    <td>@shop.Address</td>
                    <td>@shop.Stock.Address</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    List<Shop> Shops = new List<Shop>();
    List<Stock> Stocks = new List<Stock>();
    List<Product> Products = new List<Product>();
    Shop newShop = new Shop();
    User user;
    int id = 0;

    protected async override Task OnInitializedAsync()
    {
        try
        {
            var cookieContent = await localStorage.GetItemAsync<AuthInfo>(AuthInfo.CookieName);
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", cookieContent.Key);
            user = await client.GetFromJsonAsync<User>("https://localhost:5001/api/User/GetUserInfo");
            await GetShops();
            await GetStock();
            int a = 0;
        }
        catch (Exception ex)
        {
            navigation.NavigateTo("");
        }
    }

    async Task GetShops()
    {
        Shops = await client.GetFromJsonAsync<List<Shop>>("https://localhost:5001/api/Shop/GetShops");
    }
    async Task GetStock()
    {
        var st = await client.GetFromJsonAsync<List<Stock>>("https://localhost:5001/api/Stock/GetStocks");
        foreach (var item in st)
        {
            if (item != null)
            {
                Stocks.Add(item);
            }
        }
    }
    async Task CreateNewShop()
    {
        newShop.Stock = Stocks.FirstOrDefault(s => s.Id == newShop.StockId);
        await client.PostAsJsonAsync("https://localhost:5001/api/Shop/CreateShop", newShop);
        await GetShops();
    }


    async Task OnStockChange(ChangeEventArgs e)
    {
        id = int.Parse(e.Value.ToString());
        await GetShops();
    }
}